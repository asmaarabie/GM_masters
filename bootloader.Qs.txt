Q:	What's the memory accessible from the protected mode, real mode ? 
A:	Real mode programming involved manipulating data between 0 and 1 MB (0x00000 - 0xfffff)

Q:	What's the role of the BIOS?
A:	The BIOS is responsible for performing basic system initialization such as activating The video card and checking the amount of memory installed. After performing this initialization, the BIOS loads the operating system from some appropriate location such as floppy disk, hard disk, CD-ROM, or the network, and passes control of the machine to the operating system.

Q:	Where is BIOS on in JOS?
A:	at 0xF000(960KB) +64KB
F0000 -->FFFFF
Q:	What's the size of memory in JOS? 
A:	256MB

Q:	First instruction in the JOS?
A:	[f000:fff0] 0xffff0:	ljmp   $0xf000,$0xe05b, 
[f000:fff0] (CS:IP) = 16*f000+fff0
Where is 0xffff0 --> 16 bytes before the end of BIOS
$0xf000 --> segment address
$0xe05b --> IP
Jumps to somewhere earlier

Q:	What are the 0x60 and 0x64 ports??
A:	The PS/2 Controller itself uses 2 IO ports (IO ports 0x60 and 0x64). Like many IO ports, reads and writes may access completely different internal registers.
0x60	Read/Write	Data Port
0x64	Read	Status Register
0x64	Write	Command Register

Q:	 At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?

A:	 
1. ljmp    $PROT_MODE_CSEG, $protcseg
2. orl     $CR0_PE_ON, %eax
movl    %eax, %cr0

Q:	What is the last instruction of the boot loader executed? and what is the first instruction of the kernel it just loaded?
A:	
((void (*)(void)) (ELFHDR->e_entry))();
    7d5e:	ff 15 18 00 01 00    	call   *0x10018


Q:	Where is the first instruction of the kernel?
A:	=> 0x10000c:	movw   $0x1234,0x472

Q:	How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? Where does it find this information?

A:	 ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
  eph = ph + ELFHDR->e_phnum;
  Answer here http://os-tres.net/blog/2012/11/05/the-cs372h-operating-systems-class-lab-1/
e_phnum is the number of segments (each segment has several sectors),
sectors = ph->p_memsz, so the # of sectors = sum over (e_phnum) ph->p_memsz

Q:	identify the first instruction that would "break" or otherwise do the wrong thing if you were to get the boot loader's link address wrong
A:	
Check this http://raphaelscarvalho.blogspot.com.eg/2013/01/hacking-over-and-over.html
ljmp    $PROT_MODE_CSEG, $protcseg

Q: Exercise 7. Use QEMU and GDB to trace into the JOS kernel and stop at the movl %eax, %cr0. Examine memory at 0x00100000 and at 0xf0100000. Now, single step over that instruction using the stepi GDB command. Again, examine memory at 0x00100000 and at 0xf0100000. Make sure you understand what just happened.

A:	b *0x100025 
after stepi, the kernel is mapped to the high address, same instructions at *0x100025 and *0xf0100025

Q:	What is the first instruction after the new mapping is established that would fail to work properly if the mapping weren't in place? Comment out the movl %eax, %cr0 in kern/entry.S, trace into it, and see if you were right.

A:	
mov    $0xf010002c,%eax
	jmp	*%eax
f010002a:	ff e0                	jmp    *%eax
movl	$0x0,%ebp			# nuke frame pointer
f010002c:	bd 00 00 00 00       	mov    $0x0,%ebp
there is no address f010002c

Q --> Implemented octal??

Q: Explain the following from console.c:
A: When screen is full, push it up and clear last line

Q:	Explain the interface between printf.c and console.c. Specifically, what function does console.c export? How is this function used by printf.c?
A:	cputchar is ised in printf.c, putch is used in vcprintf

Q:	In the call to cprintf(), to what does fmt point? To what does ap point?

A:	In the call to cprintf(), fmt point to the format string of its arguments, ap points to the variable arguments after fmt.
ap points to the first argument I guess, and the va_args gets them one by one

Q: List (in order of execution) each call to cons_putc, va_arg, and vcprintf. For cons_putc, list its argument as well. For va_arg, list what ap points to before and after the call. For vcprintf list the values of its two arguments.

A:

cprintf (fmt=0xf0101ad2 "x %d, y %x, z %d\n") 
vcprintf (fmt=0xf0101ad2 "x %d, y %x, z %d\n", ap=0xf0115f64 "\001")
cons_putc (c=120) # ASCII for x, 0x78
cons_putc (c=32) # ASCII for space 0x20
va_arg(*ap, int)
Hardware watchpoint 4: ap
Old value = 0xf0115f64 "\001"
New value = 0xf0115f68 "\003"
cons_putc (c=49)
cons_putc (c=44)
cons_putc (c=32)
cons_putc (c=121)
cons_putc (c=32)
va_arg(*ap, int)
Hardware watchpoint 4: ap
Old value = 0xf0115f68 "\003"
New value = 0xf0115f6c "\004"
cons_putc (c=51)
cons_putc (c=44)
cons_putc (c=32)
cons_putc (c=122)
cons_putc (c=32)
va_arg(*ap, int)
Hardware watchpoint 4: ap
Old value = 0xf0115f6c "\004"
New value = 0xf0115f70 "T\034\020?\214_\021??\027\020??_\021??\027\020?_\021?_\021?" #only its value 0xf0115f70 makes sense
cons_putc (c=52)
cons_putc (c=10)


Q:	In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

    cprintf("x=%d y=%d", 3);
A:	It will be the decimal value of the 4 bytes right above where 3 is placed in the stack.

Q:	Run the following code.

    unsigned int i = 0x00646c72;
    cprintf("H%x Wo%s", 57616, &i);
What is the output? Explain how this output is arrived at in the step-by-step manner of the previous exercise.

A:	The output is He110 World, because 57616=0xe110, so the first half of output is He110, i=0x00646c72 is treated as a string, so it will be printed as 'r'=(char)0x72 'l'=(char)0x6c 'd'=(char)0x64, and 0x00 is treated as a mark of end of string.

Q:	The output depends on that fact that the x86 is little-endian. If the x86 were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?

A:	We will see He110, Wo in a big-endian machine, as the 0x00 will be encountered first to indicate end of str, we don't have to change 57616 because only it's numeric value matters when being printed.

Q: In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?
               cprintf("x=%d y=%d", 3);
A:	It will be the decimal value of the 4 bytes right above where 3 is placed in the stack.

Q:	Let's say that GCC changed its calling convention so that it pushed arguments on the stack in declaration order, so that the last argument is pushed last. How would you have to change cprintf or its interface so that it would still be possible to pass it a variable number of arguments?

A:	Reverese the va_args list, OR Push an integer after the last argument indicating the number of arguments.

Q: 1. Determine where the kernel initializes its stack, 2. and exactly where in memory its stack is located. 3. How does the kernel reserve space for its stack? 4. And at which "end" of this reserved area is the stack pointer initialized to point to?

1. Initializes the ebp to 0 so that the first stack frame terminates properly
It is pushed 
movl	$0x0,%ebp			# nuke frame pointer
f010002f:	bd 00 00 00 00       	mov    $0x0,%ebp

2. Sets the stack pointer to the address 0xf0116000 (Beginning of stack)
The first stack frame starts at this address so ebp is updated with the first call
to hold the esp value, then pushes it
	movl	$(bootstacktop),%esp
f0100034:	bc 00 60 11 f0       	mov    $0xf0116000,%esp

3.  
.globl    bootstack
bootstack:
  .space    KSTKSIZE
  .globl    bootstacktop 

4. It is initialized at the high end 0xf0116000 and grows downward



